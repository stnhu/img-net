{"version":3,"file":"static/js/509.f4a55cf5.chunk.js","mappings":"yRAQMA,EAAMC,EAAAA,GAAAA,IAAH,8GAMHC,GAAeD,EAAAA,EAAAA,IAAOE,EAAAA,EAAPF,CAAH,8CAIZG,EAAaH,EAAAA,GAAAA,OAAH,2IASVI,EAAaJ,EAAAA,GAAAA,IAAH,6FAsFhB,GAhFkBK,EAAAA,EAAAA,KAAS,WACzB,IAAQC,GAAiBC,EAAAA,EAAAA,KAAjBD,cAWRE,EAAAA,EAAAA,YAAU,WAKR,OAJAF,EAAaG,OACbC,QAAQC,IAAI,4BACZD,QAAQC,IAAIL,EAAaM,MAElB,WACLF,QAAQC,IAAI,4BACZL,EAAaO,WAId,IAOH,OACE,SAACT,EAAD,CACEU,GAAG,gBACHC,MAAO,CACLC,OAAQ,IACRC,SAAU,OACVC,QAAS,SACTC,OAAQ,uCANZ,UASE,SAAC,IAAD,CACEC,WAAYd,EAAaM,KAAKS,OAC9BC,KAvCe,WACfhB,EAAaiB,YAGjBjB,EAAaG,OACbC,QAAQC,IAAI,oCACZD,QAAQC,IAAIL,EAAaM,QAkCrBY,QAASlB,EAAakB,QACtBC,QACE,SAAC,IAAD,CACEC,QAAM,EACNC,UAAW,CACTC,KAAM,GAERC,QAAM,IAGVC,YAAY,SAAC,IAAD,CAASC,OAAK,EAAd,kDACZC,iBAAiB,gBAdnB,UAgBE,SAAC,KAAD,CAAMC,WAAY3B,EAAaM,KAC7BsB,WACE,SAAAC,GAAI,OACF,UAAC,UAAD,CAA0BpB,MAAO,CAAEqB,eAAgB,QAAnD,WACE,0BACE,SAACrC,EAAD,CAAKsC,IAAKF,EAAKG,WAAWC,IAAID,WAAWC,IAAKxB,MAAO,CAAEC,OAAQ,cAEjE,gBAAKD,MAAO,CAAEyB,WAAY,QAA1B,UACE,wBAAKL,EAAKG,WAAWG,cAEvB,gBAAK1B,MAAO,CAAEyB,WAAY,QAA1B,UACE,cAAGE,OAAO,SAASC,KAAMR,EAAKG,WAAWC,IAAID,WAAWC,IAAxD,SAA8DJ,EAAKG,WAAWC,IAAID,WAAWC,SAE/F,SAACpC,EAAD,CAAYyC,QAAS,kBA5CbL,EA4CgCJ,EAAKG,WAAWC,IAAID,WAAWC,IA3CnFM,UAAUC,UAAUC,UAApB,UAAiCR,SACjCS,EAAAA,GAAAA,QAAgB,4BAFG,IAACT,GA4CR,yCACA,SAACtC,EAAD,CAAc2C,QAAY,WAAQtC,EAAa2C,QAAQd,EAAKrB,KAA5D,wBAXcqB,EAAKe,eCtF7BC,EAAInD,EAAAA,GAAAA,EAAH,oFAKDoD,EAAUpD,EAAAA,GAAAA,IAAH,qIAoBb,GAZkBK,EAAAA,EAAAA,KAAS,WACzB,IAAQgD,GAAc9C,EAAAA,EAAAA,KAAd8C,UACR,OACE,UAACD,EAAD,YACE,eAAIrC,MAAO,CAACuC,aAAc,QAA1B,sCAEED,EAAUE,aAAc,SAACC,EAAD,KAAW,SAACL,EAAD","sources":["components/List.js","pages/History.js"],"sourcesContent":["import React, { useEffect } from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport { useStores } from '../stores'\r\nimport InfiniteScroll from 'react-infinite-scroll-component'\r\nimport { Divider, List, Skeleton, Button, message } from 'antd'\r\nimport styled from 'styled-components'\r\n\r\n\r\nconst Img = styled.img`\r\n  width: 200px;\r\n  height: 100px;\r\n  object-fit: contain;\r\n  border: 1px solid #ccc;\r\n`\r\nconst StyledButton = styled(Button)`\r\n  margin-left: 10px;\r\n`\r\n\r\nconst CopyButton = styled.button`\r\n  margin-left: 10px;\r\n  padding: 0;\r\n\r\n  color: grey;\r\n  border: none;\r\n  border-radius: 4px;\r\n  cursor: pointer;\r\n`\r\nconst StyledList = styled.div`\r\n  white-space: nowrap;\r\n  border: 1px soild red;\r\n  overflow: auto;\r\n`\r\n\r\nconst Component = observer(() => {\r\n  const { HistoryStore } = useStores()\r\n\r\n  const loadMoreData = () => {\r\n    if (HistoryStore.isLoading) {\r\n      return\r\n    }\r\n    HistoryStore.find()\r\n    console.log('加载更多中..')\r\n    console.log(HistoryStore.list)\r\n  }\r\n\r\n  useEffect(() => {\r\n    HistoryStore.find()\r\n    console.log('加载组件')\r\n    console.log(HistoryStore.list)\r\n\r\n    return () => {\r\n      console.log('卸载组件')\r\n      HistoryStore.reset()\r\n      // React StrictMode renders components twice on dev server\r\n      // https://stackoverflow.com/questions/60618844/react-hooks-useeffect-is-called-twice-even-if-an-empty-array-is-used-as-an-ar\r\n    }\r\n  }, [])\r\n\r\n  const bindOnClick1 = (url) => {\r\n    navigator.clipboard.writeText(`${url}`)\r\n    message.success('复制成功')\r\n  }\r\n\r\n  return (\r\n    <StyledList\r\n      id=\"scrollableDiv\"\r\n      style={{\r\n        height: 800,\r\n        overflow: 'auto',\r\n        padding: '0 16px',\r\n        border: '1px solid rgba(140, 140, 140, 0.35)',\r\n      }}\r\n    >\r\n      <InfiniteScroll\r\n        dataLength={HistoryStore.list.length}\r\n        next={loadMoreData}\r\n        hasMore={HistoryStore.hasMore}\r\n        loader={\r\n          <Skeleton\r\n            avatar\r\n            paragraph={{\r\n              rows: 1,\r\n            }}\r\n            active\r\n          />\r\n        }\r\n        endMessage={<Divider plain>It is all, nothing more 🤐</Divider>}\r\n        scrollableTarget=\"scrollableDiv\"\r\n      >\r\n        <List dataSource={HistoryStore.list}\r\n          renderItem={\r\n            item => (\r\n              <List.Item key={item.cid} style={{ justifyContent: 'left' }}>\r\n                <div>\r\n                  <Img src={item.attributes.url.attributes.url} style={{ height: '100px' }} />\r\n                </div>\r\n                <div style={{ marginLeft: '30px' }}>\r\n                  <h4>{item.attributes.filename}</h4>\r\n                </div>\r\n                <div style={{ marginLeft: '30px' }}>\r\n                  <a target=\"_blank\" href={item.attributes.url.attributes.url}>{item.attributes.url.attributes.url}</a>\r\n                </div>\r\n                <CopyButton onClick={() => bindOnClick1(item.attributes.url.attributes.url)}> 点击复制 </CopyButton>\r\n                <StyledButton onClick = { () => { HistoryStore.destory(item.id) } }> Delete </StyledButton>\r\n              </List.Item>\r\n            )\r\n          }\r\n        />\r\n      </InfiniteScroll>\r\n    </StyledList>\r\n  );\r\n})\r\n\r\nexport default Component","import React from 'react'\r\nimport { observer } from 'mobx-react'\r\nimport List from '../components/List'\r\nimport { useStores } from '../stores'\r\nimport styled from 'styled-components'\r\n\r\nconst P = styled.p`\r\n  color: red;\r\n  margin-top: 100px;\r\n  text-align: center;\r\n`\r\nconst Wrapper = styled.div`\r\n  display: flex;\r\n  flex-direction: column;\r\n  justify-content: center;\r\n  height: 70vh;\r\n  overflow: auto;\r\n`\r\n\r\nconst Component = observer(() => {\r\n  const { UserStore } = useStores()\r\n  return (\r\n    <Wrapper>\r\n      <h1 style={{marginBottom: '80px'}}>上传历史</h1>\r\n      {\r\n        UserStore.currentUser ? <List /> : <P>登录后展示用户数据</P>\r\n      }\r\n    </Wrapper>\r\n  )\r\n})\r\n\r\nexport default Component"],"names":["Img","styled","StyledButton","Button","CopyButton","StyledList","observer","HistoryStore","useStores","useEffect","find","console","log","list","reset","id","style","height","overflow","padding","border","dataLength","length","next","isLoading","hasMore","loader","avatar","paragraph","rows","active","endMessage","plain","scrollableTarget","dataSource","renderItem","item","justifyContent","src","attributes","url","marginLeft","filename","target","href","onClick","navigator","clipboard","writeText","message","destory","cid","P","Wrapper","UserStore","marginBottom","currentUser","List"],"sourceRoot":""}